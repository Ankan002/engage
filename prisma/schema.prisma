generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SocialLink {
  youtube
  github
  facebook
  instagram
  snapchat
  other
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  name              String
  email             String    @unique
  username          String    @unique
  profile_image     String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  links             Link[]
  topics            Topic[]
  sent_messages     Message[] @relation("sender")
  received_messages Message[] @relation("receiver")
}

model Profile {
  id                   String   @id @default(uuid()) @db.Uuid
  is_accepting_message Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

model Avatar {
  id         String   @id @default(uuid()) @db.Uuid
  image_url  String
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Link {
  id         String     @id @default(uuid()) @db.Uuid
  type       SocialLink @default(other)
  link       String
  user_id    String     @db.Uuid
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Topic {
  id                   String    @id @default(uuid()) @db.Uuid
  name                 String
  user_id              String    @db.Uuid
  is_accepting_message Boolean   @default(true)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messages             Message[]
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  content     String
  sender_id   String?  @db.Uuid
  topic_id    String?  @db.Uuid
  receiver_id String   @db.Uuid
  sender_ip   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  sender      User?    @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver    User     @relation("receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  topic       Topic?   @relation(fields: [topic_id], references: [id], onDelete: Cascade)
}
